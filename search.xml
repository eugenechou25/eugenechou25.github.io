<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javascript之&lt;script&gt;</title>
      <link href="/2019/12/21/javascript-0/"/>
      <url>/2019/12/21/javascript-0/</url>
      
        <content type="html"><![CDATA[<h3 id="lt-script-gt-元素"><a href="#lt-script-gt-元素" class="headerlink" title="<script>元素"></a>&lt;script&gt;元素</h3><p>如果把网页比作一个人，那么HTML就是人的骨架，CSS就是人的服饰，而javascript就是肌肉和神经，虽然这样的比喻不太适合，但是多多少少两者都有点类似。要想在HTML中使用JavaScript，就需要使用&lt;script&gt;元素。平时我们使用JavaScript都是使用类似于<code>&lt;script type="text/javascript" src="xxx/xxx.js"&gt;</code>，其实正式的HTML规范中，&lt;script&gt;元素还有其他属性。</p><h6 id="0-async属性"><a href="#0-async属性" class="headerlink" title="#0 async属性"></a>#0 <code>async</code>属性</h6><p>属于可选属性，异步的意思，表示应该立即下载脚本，但不妨碍其他操作，比如下载其他资源或等待加载其他脚本，这个属性只有在使用外部脚本的时候有用，即不是内嵌脚本的时候。</p><h6 id="1-charset属性"><a href="#1-charset属性" class="headerlink" title="#1 charset属性"></a>#1 <code>charset</code>属性</h6><p>属于可选属性，表示通过<code>src</code>引入的外部文件的字符集。</p><h6 id="2-defer属性"><a href="#2-defer属性" class="headerlink" title="# 2 defer属性"></a># 2 <code>defer</code>属性</h6><p>可选属性，表示脚本可以延迟到整个文档解析、显示完成之后再之形，同样的，只对外部导入的脚本有效。</p><h6 id="3-src属性"><a href="#3-src属性" class="headerlink" title="# 3 src属性"></a># 3 <code>src</code>属性</h6><p>可选的，当使用嵌入脚本代码的就不用这个属性，表示要执行的外部文件。</p><h6 id="4-type属性"><a href="#4-type属性" class="headerlink" title="# 4 type属性"></a># 4 <code>type</code>属性</h6><p>必选，表示编码代码使用的脚本语言的内容类型。</p><h4 id="lt-script-gt-的位置"><a href="#lt-script-gt-的位置" class="headerlink" title="<script> 的位置"></a>&lt;script&gt; 的位置</h4><p>通常的做法都是将<code>&lt;script&gt;</code>标签内容放在<code>&lt;head&gt;</code>元素中，这就意味着只有等到相关的脚本和文件加载完成之后，页面才开始渲染，如果脚本文件过大，可能导致页面一片空白，为了避免这个问题，规范的Web程序应该将<code>&lt;script&gt;</code>标签放在<code>&lt;/body&gt;</code>前面，如下面这样的：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面与向对象</title>
      <link href="/2019/12/20/java/"/>
      <url>/2019/12/20/java/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h4><p>在面向对象编程中把相似的对象划归为一个类，比如我是学生，你也是学生，他也是学生，我们都在学校上学，都有学号、班级等共同属性，可以把我们归为一个学生类。在开发中呢，类还是一个模板，它定义了一个特定种类的所有对象的状态（也叫属性、变量）和行为（方法）。</p><p>类是创建对象的的模板，对象是类的实例。</p><p>从程序设计的角度看，类是面向对象程序设计中最基本的程序单元，类实质上定义的是一种数据类型，这种数据类型就是对象类型，所以我们可以用类名称来声明对象变量。，声明对象变量之后，还不能使用对象，必须用运算符<code>new</code>来创建对象实体，才可以使用对象。</p><h4 id="Java中类的定义"><a href="#Java中类的定义" class="headerlink" title="Java中类的定义"></a>Java中类的定义</h4><p>类的定义样板大概如下(伪代码)</p><pre class="line-numbers language-java"><code class="language-java">修饰符 <span class="token keyword">class</span> 类名 <span class="token punctuation">[</span><span class="token keyword">extends</span> 父类名<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">implements</span> 接口名<span class="token punctuation">]</span><span class="token punctuation">{</span>    类型 成员变量<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    修饰符 类型 方法名<span class="token punctuation">(</span>类型 参数<span class="token number">1</span><span class="token punctuation">,</span>类型 参数<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        类型 局部变量<span class="token punctuation">;</span>        方法体<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[]中的为可选，修饰符修饰的是访问控制权限，比如public表示公有的，子类可以访问的。</p><p>上面伪代码没有写出来的其实还有一个很重要的一部分——类的构造函数，构造函数是类的一个特殊方法，它负责初始化类的成员变量，完成类对象的初始化工作，为使用类的对象做准备，与其他方法不同的是构造方法没有返回值而且必须与类名相同，调用方法也和普通方法不一样，必须通过new关键字来调用，调用形式如<code>类名 对象名 = new 构造方法名()</code>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开通啦</title>
      <link href="/2019/12/16/my-blog/"/>
      <url>/2019/12/16/my-blog/</url>
      
        <content type="html"><![CDATA[<h4 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h4><p>其实之前早就有创一个自己博客的想法了，一直没有付诸行动，现在稍微了解了前端知识，跟着教程一步一步把这个博客搭建出来，后续还会继续优化。</p><h4 id="会写些什么"><a href="#会写些什么" class="headerlink" title="会写些什么"></a>会写些什么</h4><p>emmm……主要是分享自己的收获，以及所感所感所想。</p><p>如果有错误，请各位大佬指出🤣。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
